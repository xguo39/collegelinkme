/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package scraper;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class XPathWrapper extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"XPathWrapper\",\"namespace\":\"scraper\",\"fields\":[{\"name\":\"expression\",\"type\":{\"type\":\"map\",\"values\":\"string\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> expression;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public XPathWrapper() {}

  /**
   * All-args constructor.
   */
  public XPathWrapper(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> expression) {
    this.expression = expression;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return expression;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: expression = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'expression' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getExpression() {
    return expression;
  }

  /**
   * Sets the value of the 'expression' field.
   * @param value the value to set.
   */
  public void setExpression(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.expression = value;
  }

  /** Creates a new XPathWrapper RecordBuilder */
  public static scraper.XPathWrapper.Builder newBuilder() {
    return new scraper.XPathWrapper.Builder();
  }
  
  /** Creates a new XPathWrapper RecordBuilder by copying an existing Builder */
  public static scraper.XPathWrapper.Builder newBuilder(scraper.XPathWrapper.Builder other) {
    return new scraper.XPathWrapper.Builder(other);
  }
  
  /** Creates a new XPathWrapper RecordBuilder by copying an existing XPathWrapper instance */
  public static scraper.XPathWrapper.Builder newBuilder(scraper.XPathWrapper other) {
    return new scraper.XPathWrapper.Builder(other);
  }
  
  /**
   * RecordBuilder for XPathWrapper instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<XPathWrapper>
    implements org.apache.avro.data.RecordBuilder<XPathWrapper> {

    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> expression;

    /** Creates a new Builder */
    private Builder() {
      super(scraper.XPathWrapper.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(scraper.XPathWrapper.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.expression)) {
        this.expression = data().deepCopy(fields()[0].schema(), other.expression);
        fieldSetFlags()[0] = true;
      }
    }
    
    /** Creates a Builder by copying an existing XPathWrapper instance */
    private Builder(scraper.XPathWrapper other) {
            super(scraper.XPathWrapper.SCHEMA$);
      if (isValidValue(fields()[0], other.expression)) {
        this.expression = data().deepCopy(fields()[0].schema(), other.expression);
        fieldSetFlags()[0] = true;
      }
    }

    /** Gets the value of the 'expression' field */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getExpression() {
      return expression;
    }
    
    /** Sets the value of the 'expression' field */
    public scraper.XPathWrapper.Builder setExpression(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[0], value);
      this.expression = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'expression' field has been set */
    public boolean hasExpression() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'expression' field */
    public scraper.XPathWrapper.Builder clearExpression() {
      expression = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public XPathWrapper build() {
      try {
        XPathWrapper record = new XPathWrapper();
        record.expression = fieldSetFlags()[0] ? this.expression : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
